// Responsive Breakpoints
@mixin respond-to($breakpoint) {
  @if $breakpoint == "container" {
    @media (max-width: $breakpoint-container) {
      @content;
    }
  }

  @if $breakpoint == "small" {
    @media (max-width: $breakpoint-small) {
      @content;
    }
  }

  @else if $breakpoint == "medium" {
    @media (max-width: $breakpoint-medium) {
      @content;
    }
  }

  @else if $breakpoint == "large" {
    @media (max-width: $breakpoint-large) {
      @content;
    }
  }
}

// Margin / Padding
@mixin generate_padding_margins() {
  @each $rule in padding, margin {
    $rule-prefix: str-slice($rule, 0, 1);

    @each $direction in "", -top, -right, -bottom, -left {
      $direction-prefix: str-slice($direction, 2, 2);

      @each $size-name, $size in $padding-margin-sizes {
        $class-name: $rule-prefix + $direction-prefix + $size-name;
        $rule-name: $rule + $direction;

        .#{$class-name} {
          #{$rule-name}: $size;
        }
      }
    }
  }
}

// Colors
@mixin generate-color-helper() {
  @each $color, $value in $palette-colors {
    .color-ft-#{$color} {
      color: $value;
    }

    .color-bg-#{$color} {
      background-color: $value;
    }
  }
} 

// Clearfix
@mixin clearfix() {
  & {
    *zoom: 1;
  }

  &:before,
  &:after {
    content: "";
    display: table;
  }

  &:after {
    clear: both;
  }
}

// Inline block
@mixin inline-block() {
  display: -moz-inline-stack;
  display: inline-block;
  vertical-align: middle;
  zoom: 1;
  *display: inline;
}

// Placeholder input
@mixin placeholder-color($color){
  &.placeholder{
    color: $color
  }

  &:-moz-placeholder{
    color: $color
  }
    
  &::-webkit-input-placeholder{
    color: $color
  }

  &:-ms-input-placeholder{
    color: $color
  }
}
